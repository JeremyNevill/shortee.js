/*
 * shortee
 * https://github.com/JeremyNevill/shortee.js
 *
 * Copyright (c) 2013 Jeremy Nevill
 * Licensed under the MIT license.
 */

'use strict';

exports.parser = (function () {
    /*
     * Generated by PEG.js 0.7.0.
     *
     * http://pegjs.majda.cz/
     */

    function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         *
         * For portability, we also escape escape all control and non-ASCII
         * characters. Note that "\0" and "\v" escape sequences are not used
         * because JSHint does not like the first and IE the second.
         */
        return '"' + s
            .replace(/\\/g, '\\\\')  // backslash
            .replace(/"/g, '\\"')    // closing quote character
            .replace(/\x08/g, '\\b') // backspace
            .replace(/\t/g, '\\t')   // horizontal tab
            .replace(/\n/g, '\\n')   // line feed
            .replace(/\f/g, '\\f')   // form feed
            .replace(/\r/g, '\\r')   // carriage return
            .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
            + '"';
    }

    var result = {
        /*
         * Parses the input with a generated parser. If the parsing is successfull,
         * returns a value explicitly or implicitly specified by the grammar from
         * which the parser was generated (see |PEG.buildParser|). If the parsing is
         * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
         */
        parse: function (input, startRule) {
            var parseFunctions = {
                "start": parse_start,
                "shortee": parse_shortee,
                "shorteewithactee": parse_shorteewithactee,
                "datevalue": parse_datevalue,
                "word": parse_word,
                "integer": parse_integer,
                "amper": parse_amper,
                "char": parse_char,
                "space": parse_space,
                "spaces": parse_spaces,
                "datedivider": parse_datedivider
            };

            if (startRule !== undefined) {
                if (parseFunctions[startRule] === undefined) {
                    throw new Error("Invalid rule name: " + quote(startRule) + ".");
                }
            } else {
                startRule = "start";
            }

            var pos = 0;
            var reportFailures = 0;
            var rightmostFailuresPos = 0;
            var rightmostFailuresExpected = [];

            function padLeft(input, padding, length) {
                var result = input;

                var padLength = length - input.length;
                for (var i = 0; i < padLength; i++) {
                    result = padding + result;
                }

                return result;
            }

            function escape(ch) {
                var charCode = ch.charCodeAt(0);
                var escapeChar;
                var length;

                if (charCode <= 0xFF) {
                    escapeChar = 'x';
                    length = 2;
                } else {
                    escapeChar = 'u';
                    length = 4;
                }

                return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
            }

            function matchFailed(failure) {
                if (pos < rightmostFailuresPos) {
                    return;
                }

                if (pos > rightmostFailuresPos) {
                    rightmostFailuresPos = pos;
                    rightmostFailuresExpected = [];
                }

                rightmostFailuresExpected.push(failure);
            }

            function parse_start() {
                var result0;

                result0 = parse_shortee();
                if (result0 === null) {
                    result0 = parse_shorteewithactee();
                }
                return result0;
            }

            function parse_shortee() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_amper();
                if (result0 !== null) {
                    result1 = parse_word();
                    if (result1 !== null) {
                        result2 = parse_space();
                        if (result2 !== null) {
                            result3 = parse_word();
                            if (result3 !== null) {
                                result4 = parse_space();
                                if (result4 !== null) {
                                    result5 = parse_integer();
                                    if (result5 !== null) {
                                        result6 = parse_word();
                                        if (result6 !== null) {
                                            result7 = parse_space();
                                            if (result7 !== null) {
                                                result8 = parse_datevalue();
                                                if (result8 !== null) {
                                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                                                } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                }
                                            } else {
                                                result0 = null;
                                                pos = pos1;
                                            }
                                        } else {
                                            result0 = null;
                                            pos = pos1;
                                        }
                                    } else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, actor, action, amount, units, date) {
                        return {actor: actor, action: action,
                            amount: amount, units: units, date: date}
                    })(pos0, result0[1], result0[3], result0[5], result0[6], result0[8]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_shorteewithactee() {
                var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_amper();
                if (result0 !== null) {
                    result1 = parse_word();
                    if (result1 !== null) {
                        result2 = parse_space();
                        if (result2 !== null) {
                            result3 = parse_word();
                            if (result3 !== null) {
                                result4 = parse_space();
                                if (result4 !== null) {
                                    result5 = parse_amper();
                                    if (result5 !== null) {
                                        result6 = parse_word();
                                        if (result6 !== null) {
                                            result7 = parse_space();
                                            if (result7 !== null) {
                                                result8 = parse_integer();
                                                if (result8 !== null) {
                                                    result9 = parse_word();
                                                    if (result9 !== null) {
                                                        result10 = parse_space();
                                                        if (result10 !== null) {
                                                            result11 = parse_datevalue();
                                                            if (result11 !== null) {
                                                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                                                            } else {
                                                                result0 = null;
                                                                pos = pos1;
                                                            }
                                                        } else {
                                                            result0 = null;
                                                            pos = pos1;
                                                        }
                                                    } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                    }
                                                } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                }
                                            } else {
                                                result0 = null;
                                                pos = pos1;
                                            }
                                        } else {
                                            result0 = null;
                                            pos = pos1;
                                        }
                                    } else {
                                        result0 = null;
                                        pos = pos1;
                                    }
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, actor, action, actee, amount, units, date) {
                        return {actor: actor, action: action,
                            actee: actee, amount: amount, units: units, date: date}
                    })(pos0, result0[1], result0[3], result0[6], result0[8], result0[9], result0[11]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_datevalue() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_integer();
                if (result0 !== null) {
                    result1 = parse_datedivider();
                    if (result1 !== null) {
                        result3 = parse_char();
                        if (result3 !== null) {
                            result2 = [];
                            while (result3 !== null) {
                                result2.push(result3);
                                result3 = parse_char();
                            }
                        } else {
                            result2 = null;
                        }
                        if (result2 !== null) {
                            result4 = parse_datedivider();
                            if (result4 !== null) {
                                result3 = [];
                                while (result4 !== null) {
                                    result3.push(result4);
                                    result4 = parse_datedivider();
                                }
                            } else {
                                result3 = null;
                            }
                            if (result3 !== null) {
                                result4 = parse_integer();
                                if (result4 !== null) {
                                    result0 = [result0, result1, result2, result3, result4];
                                } else {
                                    result0 = null;
                                    pos = pos1;
                                }
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function (offset, day, month, year) {
                        return day + "/" + month.join("") + "/" + year
                    })(pos0, result0[0], result0[2], result0[4]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_word() {
                var result0, result1;
                var pos0;

                pos0 = pos;
                result1 = parse_char();
                if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                        result0.push(result1);
                        result1 = parse_char();
                    }
                } else {
                    result0 = null;
                }
                if (result0 !== null) {
                    result0 = (function (offset, chars) {
                        return chars.join("")
                    })(pos0, result0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_integer() {
                var result0, result1;
                var pos0;

                reportFailures++;
                pos0 = pos;
                if (/^[0-9]/.test(input.charAt(pos))) {
                    result1 = input.charAt(pos);
                    pos++;
                } else {
                    result1 = null;
                    if (reportFailures === 0) {
                        matchFailed("[0-9]");
                    }
                }
                if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                        result0.push(result1);
                        if (/^[0-9]/.test(input.charAt(pos))) {
                            result1 = input.charAt(pos);
                            pos++;
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("[0-9]");
                            }
                        }
                    }
                } else {
                    result0 = null;
                }
                if (result0 !== null) {
                    result0 = (function (offset, digits) {
                        return parseInt(digits.join(""), 10);
                    })(pos0, result0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                reportFailures--;
                if (reportFailures === 0 && result0 === null) {
                    matchFailed("integer");
                }
                return result0;
            }

            function parse_amper() {
                var result0;

                if (input.charCodeAt(pos) === 64) {
                    result0 = "@";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"@\"");
                    }
                }
                return result0;
            }

            function parse_char() {
                var result0;

                if (/^[a-zA-Z0-9]/.test(input.charAt(pos))) {
                    result0 = input.charAt(pos);
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[a-zA-Z0-9]");
                    }
                }
                return result0;
            }

            function parse_space() {
                var result0;

                if (input.charCodeAt(pos) === 32) {
                    result0 = " ";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\" \"");
                    }
                }
                return result0;
            }

            function parse_spaces() {
                var result0, result1;

                result1 = parse_space();
                if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                        result0.push(result1);
                        result1 = parse_space();
                    }
                } else {
                    result0 = null;
                }
                return result0;
            }

            function parse_datedivider() {
                var result0;

                if (input.charCodeAt(pos) === 47) {
                    result0 = "/";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"/\"");
                    }
                }
                return result0;
            }


            function cleanupExpected(expected) {
                expected.sort();

                var lastExpected = null;
                var cleanExpected = [];
                for (var i = 0; i < expected.length; i++) {
                    if (expected[i] !== lastExpected) {
                        cleanExpected.push(expected[i]);
                        lastExpected = expected[i];
                    }
                }
                return cleanExpected;
            }

            function computeErrorPosition() {
                /*
                 * The first idea was to use |String.split| to break the input up to the
                 * error position along newlines and derive the line and column from
                 * there. However IE's |split| implementation is so broken that it was
                 * enough to prevent it.
                 */

                var line = 1;
                var column = 1;
                var seenCR = false;

                for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
                    var ch = input.charAt(i);
                    if (ch === "\n") {
                        if (!seenCR) {
                            line++;
                        }
                        column = 1;
                        seenCR = false;
                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        line++;
                        column = 1;
                        seenCR = true;
                    } else {
                        column++;
                        seenCR = false;
                    }
                }

                return { line: line, column: column };
            }


            var result = parseFunctions[startRule]();

            /*
             * The parser is now in one of the following three states:
             *
             * 1. The parser successfully parsed the whole input.
             *
             *    - |result !== null|
             *    - |pos === input.length|
             *    - |rightmostFailuresExpected| may or may not contain something
             *
             * 2. The parser successfully parsed only a part of the input.
             *
             *    - |result !== null|
             *    - |pos < input.length|
             *    - |rightmostFailuresExpected| may or may not contain something
             *
             * 3. The parser did not successfully parse any part of the input.
             *
             *   - |result === null|
             *   - |pos === 0|
             *   - |rightmostFailuresExpected| contains at least one failure
             *
             * All code following this comment (including called functions) must
             * handle these states.
             */
            if (result === null || pos !== input.length) {
                var offset = Math.max(pos, rightmostFailuresPos);
                var found = offset < input.length ? input.charAt(offset) : null;
                var errorPosition = computeErrorPosition();

                throw new this.SyntaxError(
                    cleanupExpected(rightmostFailuresExpected),
                    found,
                    offset,
                    errorPosition.line,
                    errorPosition.column
                );
            }

            return result;
        },

        /* Returns the parser source code. */
        toSource: function () {
            return this._source;
        }
    };

    /* Thrown when a parser encounters a syntax error. */

    result.SyntaxError = function (expected, found, offset, line, column) {
        function buildMessage(expected, found) {
            var expectedHumanized, foundHumanized;

            switch (expected.length) {
                case 0:
                    expectedHumanized = "end of input";
                    break;
                case 1:
                    expectedHumanized = expected[0];
                    break;
                default:
                    expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
                        + " or "
                        + expected[expected.length - 1];
            }

            foundHumanized = found ? quote(found) : "end of input";

            return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
        }

        this.name = "SyntaxError";
        this.expected = expected;
        this.found = found;
        this.message = buildMessage(expected, found);
        this.offset = offset;
        this.line = line;
        this.column = column;
    };

    result.SyntaxError.prototype = Error.prototype;

    return result;
})();